---
const { servings } = Astro.props;
---

<div id="servings" class="servings-card" data-servings={servings}> 
    <span class="description">Servings &mdash; <strong data-scalable>{servings}</strong></span>
    <div class="button-group">
        <button data-scale-factor="0.5" class="toggle" aria-selected="false">Halve</button>
        <div class="button-group-divider"></div>
        <button data-scale-factor="2" class="toggle" aria-selected="false">Double</button>
    </div>
</div>

<style>
    .servings-card {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: space-between;
        gap: var(--pad-mid);
        padding: var(--pad-mid);
        background-color: hsl(var(--plane-high) / 50%);
        border-radius: var(--pad-large);
    }

    .description {
        text-align: center;
        padding-inline-start: var(--pad-mid);
    }

    .button-group {
        display: flex;
        gap: var(--pad-small);
    }

    .button-group-divider {
        align-self: center;
        height: 1.5em;
        width: 0.125em;
        background-color: hsl(var(--contrast-low) / 50%);
    }

    .button-group > button {
        flex: 1;
    }

    button:is([aria-selected]):hover {
        background-color: hsl(var(--contrast-low) / 12.5%);
        color: hsl(var(--contrast-high));
    }
    button:is([aria-selected="true"]) {
        background-color: hsl(var(--contrast-high));
        color: hsl(var(--plane-mid));
        box-shadow: 0 0.25em 1em hsl(var(--plane-low));
    }
    button:is([aria-selected="true"]):hover {
        background-color: hsl(var(--contrast-mid));
        color: hsl(var(--plane-mid));
    }

</style>

<script>
    const servings = document.getElementById("servings");
    const scalableNodes = document.querySelectorAll("[data-scalable]");
    const scaleControllers = document.querySelectorAll("[data-scale-factor]");
    const baseScale =
        [...scalableNodes]
        .map((scalableNode) => parseFloat(scalableNode.textContent));

    function scaleBy(multiplier) {
        scalableNodes.forEach((scalableNode, i) => {
            scalableNode.textContent = (baseScale[i] * multiplier).toString();
        });
    }
    
    servings.addEventListener("click", (e) => {
        const scaler = e.target.closest("[data-scale-factor]");
        if (scaler) {
            const alreadySelected = scaler.ariaSelected === "true";
            
            scaleControllers.forEach(scaleController => scaleController.ariaSelected = "false");
            scaler.ariaSelected = alreadySelected ? "false" : "true";
            
            scaleBy(parseFloat(alreadySelected ? 1 : scaler.dataset.scaleFactor));
        }
    });
</script>
